use crate::ast::{Axis, Transform};
use std::str::FromStr;

grammar;

pub Transforms: Vec<Transform> = {
    <begin:Transforms> "," <end:Transform> => {
        let mut extend = begin;
        extend.push(end);
        extend
    },
    Transform => vec![<>],
}

Transform: Transform = {
    "rotate(" <Axis> "," <Term> ")" => Transform::Rotate(<>),
    "center()" => Transform::Center,
    "move(" <Term> "," <Term> "," <Term> ")" => Transform::Move(<>),
    "scale(" <Term> "," <Term> "," <Term> ")" => Transform::Scale(<>),
    "homothety(" <Term> ")" => Transform::Homothety(<>),
}

Term: f32 = { Num, "(" <Term> ")" };

Axis: Axis =  {
    r"[xX]" => Axis::X,
    r"[yY]" => Axis::Y,
    r"[zZ]" => Axis::Z,
};

Num: f32 = r"[0-9]+(.[0-9]+)?" => f32::from_str(<>).unwrap();